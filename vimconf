set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" The bundles you install will be listed here

filetype plugin indent on

" The rest of your config follows here

augroup vimrc_autocmds
	    autocmd!
	        " highlight characters past column 120
		autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
		autocmd FileType python match Excess /\%120v.*/
		autocmd FileType python set nowrap
		augroup END

Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
" Powerline setup
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
set laststatus=2
set t_Co=256

" Fugitive setup
Bundle 'tpope/vim-fugitive'

" NerdTree setup
Bundle 'scrooloose/nerdtree'
map <F3> :NERDTreeToggle<CR>

" Python mode
Bundle 'klen/python-mode'

" Python-mode
" " Activate rope
" " Keys:
" " K             Show python docs
" " <Ctrl-Space>  Rope autocomplete
" " <Ctrl-c>g     Rope goto definition
" " <Ctrl-c>d     Rope show documentation
" " <Ctrl-c>f     Rope find occurrences
" " <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" " [[            Jump on previous class or function (normal, visual, operator
" modes)
" " ]]            Jump on next class or function (normal, visual, operator
" modes)
" " [M            Jump on previous class or method (normal, visual, operator
" modes)
" " ]M            Jump on next class or method (normal, visual, operator
" modes)
let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" Set the pymode max line length
let g:pymode_options_max_line_length = 120 

" This chunk set up the tabs in the editor
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent

" Enable ine numbers
set number

" YouCompleteMe autocompletion
Bundle 'Valloric/YouCompleteMe'

" vim flake 8
Bundle 'nvie/vim-flake8'

" YCM extra setup for compilation commands database
let g:ycm_confirm_extra_conf = 0

" Set astylerc for c++ formatting
set equalprg=astyle

" emap F1 to switch between header and source file
nmap <F1> :if expand('%:e')=='hh'<CR>e %:r.cc<CR>else<CR>e %:r.hh<CR>endif<CR><CR>

" Nerd commentor
Bundle 'scrooloose/nerdcommenter'

" Ctrlp
Bundle 'kien/ctrlp.vim'

"search files and buffers
nmap ; :CtrlPMixed<CR>

set wildignore+=*/bin/*
set wildignore+=*/lib/*
set wildignore+=*/build/*
set wildignore+=*/mnt/*  "Do not index /mnt/
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend|so)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py|CMakeFiles|CMakeCache\.txt$|cmake_install\.cmake$'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0

"ctrlp function for closing buffers using ctrl+@
let g:ctrlp_buffer_func = { 'enter': 'CtrlPMappings' }

function! CtrlPMappings()
  nnoremap <buffer> <silent> <C-@> :call <sid>DeleteBuffer()<cr>
endfunction

function! s:DeleteBuffer()
  let path = fnamemodify(getline('.')[2:], ':p')
  let bufn = matchstr(path, '\v\d+\ze\*No Name')
  exec "bd" bufn ==# "" ? path : bufn
  exec "norm \<F5>"
endfunction

" Set syntax high-lighting
augroup av
    autocmd!
    autocmd BufRead,BufNewFile *.hh,*.cc,*.hidl set filetype=cpp
    autocmd FileType cpp set colorcolumn=120
    autocmd FileType cpp highlight ColorColumn ctermbg=darkgray
    autocmd FileType cpp set nowrap
augroup END


" Set up vim doxygen toolkit
Bundle 'vim-scripts/DoxygenToolkit.vim'

let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_paramTag_pre="@param " 
let g:DoxygenToolkit_templateParamTag_pre = "@tparam "
let g:DoxygenToolkit_returnTag="@return " 
let g:load_doxygen_syntax = 1

" Setup vim-clang-format
Bundle 'rhysd/vim-clang-format'

let g:clang_format#detect_style_file = 1
let g:clang_format#auto_format = 1
let g:clang_format#auto_format_on_insert_leave = 0
let g:clang_format#auto_formatexpr = 1

autocmd FileType c,cpp nnoremap <buffer><Leader>f :<C-u>ClangFormat<CR>         
autocmd FileType c,cpp vnoremap <buffer><Leader>f :ClangFormat<CR>              

" Setup enhanced cpp syntax
Bundle 'octol/vim-cpp-enhanced-highlight'

let g:cpp_class_scope_highlight = 1

" Setup spell check shortcup
nmap <s-p> :setlocal spell! spelllang=en_us<CR>

" Shortcut for copy and paste to from clipboard
nnoremap <C-y> "+y
vnoremap <C-y> "+y
nnoremap <C-p> "+gP
vnoremap <C-p> "+gP

" Easymotion
Plugin 'easymotion/vim-easymotion'
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Set up tag related stuffs
set tags=./tags;

" Shortcut for converting variables from snake case to camel case 
nnoremap + :s#\(\%(\<\l\+\)\%(_\)\@=\)\\|_\(\l\)#\u\1\2#g<CR>
vnoremap + :s#\(\%(\<\l\+\)\%(_\)\@=\)\\|_\(\l\)#\u\1\2#g<CR>

" Set up tagbar
Plugin 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>

" Setup CtrlPJump
Plugin 'ivalkeen/vim-ctrlp-tjump'
nnoremap <c-]> :CtrlPtjump<cr>
vnoremap <c-]> :CtrlPtjumpVisual<cr>
